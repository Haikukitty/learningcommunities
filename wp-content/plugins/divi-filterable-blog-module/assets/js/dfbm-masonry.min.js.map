{"version":3,"sources":["dfbm-masonry.js"],"names":["factory","define","amd","jQuery","$","Mosaicflow","container","options","this","trigger","init","dataToOptions","elem","upper","m","l","toUpper","data","key","replace","getImageSizes","image","sizes","height","parseInt","attr","width","utilImage","Image","src","cnt","fn","mosaicflow","args","Array","prototype","slice","call","arguments","each","elm","extend","defaults","itemSelector","columnClass","minItemWidth","minColumns","itemHeightCalculation","threshold","__uid","__uidItemCounter","items","find","columns","columnsHeights","itemsHeights","tempContainer","css","visibility","workOnTemp","autoCalculation","after","that","id","generateUniqueId","refill","window","resize","proxy","numberOfColumns","Math","floor","max","dfbmPhp","cMax","ensureColumns","fillColumns","filter","length","remove","sessionStorage","getItem","addClass","parent","createdCnt","calculatedCnt","workingContainer","neededCnt","columnIdx","column","class","append","lastColumn","eq","hide","diff","splice","columnsCnt","itemsCnt","itemIdx","item","outerHeight","levelBottomEdge","children","lowestColumn","inArray","min","apply","highestColumn","lastInHighestColumn","last","lastInHighestColumnHeight","lowestHeight","highestHeight","newLowestHeight","add","position","display","appendTo","inlineImages","imageSizes","actualHeight","detach","push","parents","index","not","empty","recomputeHeights","computeHeight","idx"],"mappings":";;;;;;;;;;;;;CAgBC,SAASA,GACc,kBAAXC,SAAyBA,OAAOC,IACzCD,QAAQ,UAAWD,GAGnBA,EAAQG,SAEV,SAASC,GA+BT,QAASC,GAAWC,EAAWC,GAC7BC,KAAKF,UAAYA,EACjBE,KAAKD,QAAUA,EAEfC,KAAKF,UAAUG,QAAQ,oBACvBD,KAAKE,OACLF,KAAKF,UAAUG,QAAQ,oBAwSzB,QAASE,GAAcC,GACrB,QAASC,GAAMC,EAAGC,GAChB,MAAOA,GAAEC,UAEX,GAAIT,MACAU,EAAOL,EAAKK,MAChB,KAAK,GAAIC,KAAOD,GACdV,EAAQW,EAAIC,QAAQ,SAAUN,IAAUI,EAAKC,EAE/C,OAAOX,GAGT,QAASa,GAAcC,GACrB,GAAIC,KAKJ,IAHAA,EAAMC,OAASC,SAASH,EAAMI,KAAK,UAAW,IAC9CH,EAAMI,MAAQF,SAASH,EAAMI,KAAK,SAAU,IAEvB,IAAjBH,EAAMC,QAAgC,IAAhBD,EAAMI,MAAa,CAC3C,GAAIC,GAAY,GAAIC,MACpBD,GAAUE,IAAMR,EAAMI,KAAK,OAE3BH,EAAMI,MAAQC,EAAUD,MACxBJ,EAAMC,OAASI,EAAUJ,OAG3B,MAAOD,GArWT,GAAIQ,GAAM,CAEV1B,GAAE2B,GAAGC,WAAa,SAASzB,GACzB,GAAI0B,GAAOC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,EAEjD,OAAO9B,MAAK+B,KAAK,WACf,GAAIC,GAAMpC,EAAEI,MACRS,EAAOuB,EAAIvB,KAAK,aAEfA,GAKuB,gBAAZV,IACdU,EAAKV,GAAS0B,EAAK,KALnB1B,EAAUH,EAAEqC,UAAWrC,EAAE2B,GAAGC,WAAWU,SAAUnC,EAASI,EAAc6B,IACxEvB,EAAO,GAAIZ,GAAWmC,EAAKjC,GAC3BiC,EAAIvB,KAAK,aAAcA,OAQ7Bb,EAAE2B,GAAGC,WAAWU,UACdC,aAAc,MACdC,YAAa,qBACbC,aAAc,IACdC,WAAY,EACZC,sBAAuB,OACvBC,UAAW,IAYb3C,EAAW8B,WACTzB,KAAM,QAAAA,KACJF,KAAKyC,MAAQnB,IACbtB,KAAK0C,iBAAmB,EACxB1C,KAAK2C,MAAQ3C,KAAKF,UAAU8C,KAAK5C,KAAKD,QAAQoC,cAC9CnC,KAAK6C,QAAUjD,MACfI,KAAK8C,kBACL9C,KAAK+C,gBACL/C,KAAKgD,cAAgBpD,EAAE,+BAA+BqD,KAAKC,WAAc,SAAUhC,MAAS,SAC5FlB,KAAKmD,YAAa,EAClBnD,KAAKoD,gBAAyD,SAAvCpD,KAAKD,QAAQwC,sBAEpCvC,KAAKF,UAAUuD,MAAMrD,KAAKgD,cAE1B,IAAIM,GAAOtD,IACXA,MAAK2C,MAAMZ,KAAK,WACd,GAAIC,GAAMpC,EAAEI,MACRuD,EAAKvB,EAAIf,KAAK,KAEbsC,KAEHA,EAAKD,EAAKE,mBACVxB,EAAIf,KAAK,KAAMsC,MAInBvD,KAAKF,UAAUmD,IAAI,aAAc,UAK/BjD,KAAKyD,SAEP7D,EAAE8D,QAAQC,OAAO/D,EAAEgE,MAAM5D,KAAKyD,OAAQzD,QAGxCyD,OAAQ,QAAAA,KACNzD,KAAKF,UAAUG,QAAQ,mBACvBD,KAAK6D,gBAAkBC,KAAKC,MAAM/D,KAAKF,UAAUoB,QAAUlB,KAAKD,QAAQsC,aAExE,IAAI2B,GAAMhD,SAAUiD,QAAQC,KAEvBtE,GAAE8D,QAAQxC,QAAU,MAAMlB,KAAK6D,gBAAkB,GACjDjE,EAAE8D,QAAQxC,QAAU,KAAOlB,KAAK6D,gBAAkB,IAAI7D,KAAK6D,gBAAkB,GAC7EjE,EAAE8D,QAAQxC,QAAU,KAAOlB,KAAK6D,gBAAkBG,IAAMhE,KAAK6D,gBAAkBG,GAGhFhE,KAAK6D,gBAAkB7D,KAAKD,QAAQuC,aACtCtC,KAAK6D,gBAAkB7D,KAAKD,QAAQuC,YAEnBtC,KAAKmE,kBAEtBnE,KAAKoE,cAGDpE,KAAK6C,QAAQwB,OAAO,YAAYC,OAAS,GAC3CtE,KAAK6C,QAAQwB,OAAO,WAAWE,UAI5Bb,OAAOc,eAAeC,QAAS,gBAAqBf,OAAOc,eAAeC,QAAS,kBAGxFzE,KAAKF,UAAUG,QAAS,qBAExBD,KAAKF,UAAU4E,SAAU,aAAczB,IAAI,aAAc,WAAW0B,SAASD,SAAU,cAIzF1E,KAAKF,UAAUG,QAAQ,sBAGzBkE,cAAe,QAAAA,KACb,GAAIS,GAAa5E,KAAK6C,QAAQwB,OAAO,YAAYC,OAC7CO,EAAgB7E,KAAK6D,eAIzB,IAFA7D,KAAK8E,iBAAkC,IAAfF,EAAmB5E,KAAKgD,cAAgBhD,KAAKF,UAEjE+E,EAAgBD,EAElB,IAAK,GADDG,GAAYF,EAAgBD,EACvBI,EAAY,EAAGA,EAAYD,EAAWC,IAAa,CAC1D,GAAIC,GAASrF,EAAE,SACbsF,MAASlF,KAAKD,QAAQqC,aAGxBpC,MAAK8E,iBAAiBK,OAAOF,OAG5B,IAAIJ,EAAgBD,EAAY,CAEnC,IADA,GAAIQ,GAAaR,EACVC,GAAiBO,GAEtBpF,KAAK6C,QAAQwC,GAAGD,GAAYE,OAC5BF,GAGF,IAAIG,GAAOX,EAAaC,CACxB7E,MAAK8C,eAAe0C,OAAOxF,KAAK8C,eAAewB,OAASiB,EAAMA,GAGhE,MAAIV,KAAkBD,IACpB5E,KAAK6C,QAAU7C,KAAK8E,iBAAiBlC,KAAK,IAAM5C,KAAKD,QAAQqC,aAC7DpC,KAAK6C,QAAQI,IAAI,QAAU,IAAM4B,EAAiB,MAC3C,IAMXT,YAAa,QAAAA,KAKX,IAAK,GAJDqB,GAAazF,KAAK6D,gBAElB6B,EAAW1F,KAAK2C,MAAM2B,OAEjBU,EAAY,EAAGA,EAAYS,EAAYT,IAAa,CAC3D,GAAIC,GAASjF,KAAK6C,QAAQwC,GAAGL,EAE7BhF,MAAK8C,eAAekC,GAAa,CAEjC,KAAK,GAAIW,GAAUX,EAAWW,EAAUD,EAAUC,GAAWF,EAAY,CAEvE,GAAIG,GAAO5F,KAAK2C,MAAM0C,GAAGM,GACrB5E,EAAS,CAEbkE,GAAOE,OAAOS,GAIZ7E,EAFEf,KAAKoD,gBAEEwC,EAAKC,cAIL7E,SAAS4E,EAAKhD,KAAK,OAAO3B,KAAK,UAAW,IAGrDjB,KAAK+C,aAAa6C,EAAK3E,KAAK,OAASF,EACrCf,KAAK8C,eAAekC,IAAcjE,GAItCf,KAAK8F,gBAAgB9F,KAAK+C,aAAc/C,KAAK8C,gBAEzC9C,KAAK8E,mBAAqB9E,KAAKgD,eACjChD,KAAKF,UAAUqF,OAAOnF,KAAKgD,cAAc+C,YAE3C/F,KAAKF,UAAUG,QAAQ,sBAGzB6F,gBAAiB,QAAAA,GAAS/C,EAAcD,GACtC,OAAa,CACX,GAAIkD,GAAepG,EAAEqG,QAAQnC,KAAKoC,IAAIC,MAAM,KAAMrD,GAAiBA,GAC/DsD,EAAgBxG,EAAEqG,QAAQnC,KAAKE,IAAImC,MAAM,KAAMrD,GAAiBA,EACpE,IAAIkD,IAAiBI,EAAe,MAEpC,IAAIC,GAAsBrG,KAAK6C,QAAQwC,GAAGe,GAAeL,WAAWO,OAChEC,EAA4BxD,EAAasD,EAAoBpF,KAAK,OAClEuF,EAAe1D,EAAekD,GAC9BS,EAAgB3D,EAAesD,GAC/BM,EAAkBF,EAAeD,CAErC,IAAIG,GAAmBD,EAAe,MAEtC,IAAIA,EAAgBC,EAAkB1G,KAAKD,QAAQyC,UAAW,MAE9DxC,MAAK6C,QAAQwC,GAAGW,GAAcb,OAAOkB,GACrCvD,EAAesD,IAAkBG,EACjCzD,EAAekD,IAAiBO,IAIpCI,IAAK,QAAAA,GAAS3E,GACZhC,KAAKF,UAAUG,QAAQ,uBAAwB+B,GAC/C,IAAIgE,GAAepG,EAAEqG,QAAQnC,KAAKoC,IAAIC,MAAM,KAAMnG,KAAK8C,gBAAiB9C,KAAK8C,gBACzE/B,EAAS,CAEb,IAAIf,KAAKoD,gBAAiB,CAGxBpB,EAAIiB,KACF2D,SAAU,SACV1D,WAAY,SACZ2D,QAAS,UACRC,SAAS9G,KAAK6C,QAAQwC,GAAGW,IAE5BjF,EAASiB,EAAI6D,aAEb,IAAIkB,GAAe/E,EAAIY,KAAK,MACA,KAAxBmE,EAAazC,QACfyC,EAAahF,KAAK,WAChB,GAAIlB,GAAQjB,EAAEI,MACVgH,EAAapG,EAAcC,GAC3BoG,EAAgBpG,EAAMK,QAAU8F,EAAWjG,OAAUiG,EAAW9F,KAEpEH,IAAUkG,IAIdjF,EAAIkF,SAASjE,KACX2D,SAAU,SACV1D,WAAY,gBAIdnC,GAASC,SAASgB,EAAIY,KAAK,OAAO3B,KAAK,UAAW,GAG/Ce,GAAIf,KAAK,OAEZe,EAAIf,KAAK,KAAMjB,KAAKwD,oBAMtBxD,KAAK2C,MAAMwE,KAAMnF,EAAI,IAErBhC,KAAK+C,aAAaf,EAAIf,KAAK,OAASF,EACpCf,KAAK8C,eAAekD,IAAiBjF,EACrCf,KAAK6C,QAAQwC,GAAGW,GAAcb,OAAOnD,GAErChC,KAAK8F,gBAAgB9F,KAAK+C,aAAc/C,KAAK8C,gBAC7C9C,KAAKF,UAAUG,QAAQ,qBACvBD,KAAKF,UAAUG,QAAQ,yBAA0B+B,KAGnDuC,OAAQ,QAAAA,GAASvC,GACfhC,KAAKF,UAAUG,QAAQ,0BAA2B+B,GAClD,IAAIiD,GAASjD,EAAIoF,QAAQ,IAAMpH,KAAKD,QAAQqC,YAG5CpC,MAAK8C,eAAemC,EAAOoC,QAAU,IAAMrH,KAAK+C,aAAaf,EAAIf,KAAK,OAEtEe,EAAIkF,SAGJlH,KAAK2C,MAAQ3C,KAAK2C,MAAM2E,IAAItF,GAC5BhC,KAAK8F,gBAAgB9F,KAAK+C,aAAc/C,KAAK8C,gBAC7C9C,KAAKF,UAAUG,QAAQ,qBACvBD,KAAKF,UAAUG,QAAQ,2BAA4B+B,KAGrDuF,MAAO,QAAAA,KACL,GAAI9B,GAAazF,KAAK6D,eAEtB7D,MAAK2C,MAAQ/C,MACbI,KAAK+C,eAEL,KAAK,GAAIiC,GAAY,EAAGA,EAAYS,EAAYT,IAAa,CAC3D,GAAIC,GAASjF,KAAK6C,QAAQwC,GAAGL,EAC7BhF,MAAK8C,eAAekC,GAAa,EACjCC,EAAOsC,QAETvH,KAAKF,UAAUG,QAAQ,sBAGzBuH,iBAAkB,QAAAA,KAChB,QAASC,GAAcC,EAAK9B,GAC1BA,EAAOhG,EAAEgG,EACT,IAAI7E,GAAS,CAGXA,GAFEuC,EAAKF,gBAEEwC,EAAKC,cAIL7E,SAAS4E,EAAKhD,KAAK,OAAO3B,KAAK,UAAW,IAGrDqC,EAAKP,aAAa6C,EAAK3E,KAAK,OAASF,EACrCuC,EAAKR,eAAekC,IAAcjE,EAMpC,IAAK,GAHDuC,GAAOtD,KACPyF,EAAazF,KAAK6D,gBAEbmB,EAAY,EAAGA,EAAYS,EAAYT,IAAa,CAC3D,GAAIC,GAASjF,KAAK6C,QAAQwC,GAAGL,EAE7BhF,MAAK8C,eAAekC,GAAa,EACjCC,EAAOc,WAAWhE,KAAK0F,KAI3BjE,iBAAkB,QAAAA,KAKhB,MAHAxD,MAAK0C,mBAGE,UAAY1C,KAAKyC,MAAQ,WAAazC,KAAK0C","file":"dfbm-masonry.min.js","sourcesContent":["/**\n * Mosaic Flow\n *\n * Pinterest like responsive image grid that doesnâ€™t sucks\n *\n * @requires jQuery\n * @author Artem Sapegin\n * @copyright 2012 Artem Sapegin, http://sapegin.me\n * @license MIT\n *\n * This is a custom version of this plugin, to work nicely with Divi and the Plugin \"Divi - Filterable Blog Module\" by Bruno Bouyajdad from https://indikator-design.com\n *\n */\n\n/*jshint browser:true, jquery:true, white:false, smarttabs:true */\n/*global jQuery:false, define:false*/\n(function(factory) {  // Try to register as an anonymous AMD module\n  if (typeof define === 'function' && define.amd) {\n    define(['jquery'], factory);\n  }\n  else {\n    factory(jQuery);\n  }\n}(function($) {\n  'use strict';\n  var cnt = 0;\n\n  $.fn.mosaicflow = function(options) {\n    var args = Array.prototype.slice.call(arguments, 0);\n\n    return this.each(function() {\n      var elm = $(this);\n      var data = elm.data('mosaicflow');\n\n      if (!data) {\n        options = $.extend({}, $.fn.mosaicflow.defaults, options, dataToOptions(elm));\n        data = new Mosaicflow(elm, options);\n        elm.data('mosaicflow', data);\n      }\n      else if (typeof options === 'string') {\n        data[options](args[1]);\n      }\n    });\n  };\n\n  $.fn.mosaicflow.defaults = {\n    itemSelector: '> *',\n    columnClass: 'mosaicflow__column',\n    minItemWidth: 240,\n    minColumns: 2,\n    itemHeightCalculation: 'auto',\n    threshold: 40\n  };\n\n  function Mosaicflow(container, options) {\n    this.container = container;\n    this.options = options;\n\n    this.container.trigger('mosaicflow-start');\n    this.init();\n    this.container.trigger('mosaicflow-ready');\n  }\n\n  Mosaicflow.prototype = {\n    init: function() {\n      this.__uid = cnt++;\n      this.__uidItemCounter = 0;\n      this.items = this.container.find(this.options.itemSelector);\n      this.columns = $([]);\n      this.columnsHeights = [];\n      this.itemsHeights = {};\n      this.tempContainer = $('<div class=\"tempContainer\">').css({'visibility': 'hidden', 'width': '100%'});\n      this.workOnTemp = false;\n      this.autoCalculation = this.options.itemHeightCalculation === 'auto';\n\n      this.container.after(this.tempContainer);\n\n      var that = this;\n      this.items.each(function() {\n        var elm = $(this);\n        var id = elm.attr('id');\n\n        if (!id) {\n          // Generate an unique id\n          id = that.generateUniqueId();\n          elm.attr('id', id);\n        }\n      });\n\n      this.container.css('visibility', 'hidden');\n      // if (this.autoCalculation) {\n        // $(window).on('load', $.proxy(this.refill, this));\n      // }\n      // else {\n        this.refill();\n      // }\n      $(window).resize($.proxy(this.refill, this));\n    },\n\n    refill: function() {\n      this.container.trigger('mosaicflow-fill');\n      this.numberOfColumns = Math.floor(this.container.width() / this.options.minItemWidth);\n\n      var max = parseInt( dfbmPhp.cMax );\n\n      if ( $(window).width() < 768 ) this.numberOfColumns = 1;\n      if ( $(window).width() > 767 && this.numberOfColumns < 2 ) this.numberOfColumns = 2;\n      if ( $(window).width() > 767 && this.numberOfColumns > max ) this.numberOfColumns = max;\n\n      // Always keep min columns number\n      if (this.numberOfColumns < this.options.minColumns)\n        this.numberOfColumns = this.options.minColumns;\n\n      var needToRefill = this.ensureColumns();\n      if (needToRefill) {\n        this.fillColumns();\n\n        // Remove excess columns, only if there are visible columns remaining\n        if (this.columns.filter(':visible').length > 0) {\n          this.columns.filter(':hidden').remove();\n        }\n      }\n\n      if ( ! window.sessionStorage.getItem( 'dfbmAddMore' ) && ! window.sessionStorage.getItem( 'dfbmRedirect' ) )\n      {\n\n        this.container.trigger( 'adjust-scroll-top' );\n\n        this.container.addClass( 'completed' ).css('visibility', 'visible').parent().addClass( 'completed' );\n\n      }\n\n      this.container.trigger('mosaicflow-filled');\n    },\n\n    ensureColumns: function() {\n      var createdCnt = this.columns.filter(':visible').length;\n      var calculatedCnt = this.numberOfColumns;\n\n      this.workingContainer = createdCnt === 0 ? this.tempContainer : this.container;\n\n      if (calculatedCnt > createdCnt) {\n        var neededCnt = calculatedCnt - createdCnt;\n        for (var columnIdx = 0; columnIdx < neededCnt; columnIdx++) {\n          var column = $('<div>', {\n            'class': this.options.columnClass\n          });\n\n          this.workingContainer.append(column);\n        }\n      }\n      else if (calculatedCnt < createdCnt) {\n        var lastColumn = createdCnt;\n        while (calculatedCnt <= lastColumn) {\n          // We can't remove columns here becase it will remove items to. So we hide it and will remove later.\n          this.columns.eq(lastColumn).hide();\n          lastColumn--;\n        }\n\n        var diff = createdCnt - calculatedCnt;\n        this.columnsHeights.splice(this.columnsHeights.length - diff, diff);\n      }\n\n      if (calculatedCnt !== createdCnt) {\n        this.columns = this.workingContainer.find('.' + this.options.columnClass);\n        this.columns.css('width', (100 / calculatedCnt) + '%');\n        return true;\n      }\n\n      return false;\n    },\n\n    fillColumns: function() {\n      var columnsCnt = this.numberOfColumns;\n\n      var itemsCnt = this.items.length;\n\n      for (var columnIdx = 0; columnIdx < columnsCnt; columnIdx++) {\n        var column = this.columns.eq(columnIdx);\n\n        this.columnsHeights[columnIdx] = 0;\n\n        for (var itemIdx = columnIdx; itemIdx < itemsCnt; itemIdx += columnsCnt) {\n\n          var item = this.items.eq(itemIdx);\n          var height = 0;\n\n          column.append(item);\n\n          if (this.autoCalculation) {\n            // Check height after being placed in its column\n            height = item.outerHeight();\n          }\n          else {\n            // Read img height attribute\n            height = parseInt(item.find('img').attr('height'), 10);\n          }\n\n          this.itemsHeights[item.attr('id')] = height;\n          this.columnsHeights[columnIdx] += height;\n        }\n      }\n\n      this.levelBottomEdge(this.itemsHeights, this.columnsHeights);\n\n      if (this.workingContainer === this.tempContainer) {\n        this.container.append(this.tempContainer.children());\n      }\n      this.container.trigger('mosaicflow-layout');\n    },\n\n    levelBottomEdge: function(itemsHeights, columnsHeights) {\n      while (true) {\n        var lowestColumn = $.inArray(Math.min.apply(null, columnsHeights), columnsHeights);\n        var highestColumn = $.inArray(Math.max.apply(null, columnsHeights), columnsHeights);\n        if (lowestColumn === highestColumn) return;\n\n        var lastInHighestColumn = this.columns.eq(highestColumn).children().last();\n        var lastInHighestColumnHeight = itemsHeights[lastInHighestColumn.attr('id')];\n        var lowestHeight = columnsHeights[lowestColumn];\n        var highestHeight = columnsHeights[highestColumn];\n        var newLowestHeight = lowestHeight + lastInHighestColumnHeight;\n\n        if (newLowestHeight >= highestHeight) return;\n\n        if (highestHeight - newLowestHeight < this.options.threshold) return;\n\n        this.columns.eq(lowestColumn).append(lastInHighestColumn);\n        columnsHeights[highestColumn] -= lastInHighestColumnHeight;\n        columnsHeights[lowestColumn] += lastInHighestColumnHeight;\n      }\n    },\n\n    add: function(elm) {\n      this.container.trigger('mosaicflow-item-add', [elm]);\n      var lowestColumn = $.inArray(Math.min.apply(null, this.columnsHeights), this.columnsHeights);\n      var height = 0;\n\n      if (this.autoCalculation) {\n\n        // Get height of elm\n        elm.css({\n          position: 'static',\n          visibility: 'hidden',\n          display: 'block'\n        }).appendTo(this.columns.eq(lowestColumn));\n\n        height = elm.outerHeight();\n\n        var inlineImages = elm.find('img');\n        if (inlineImages.length !== 0) {\n          inlineImages.each(function() {\n            var image = $(this);\n            var imageSizes = getImageSizes(image);\n            var actualHeight = (image.width() * imageSizes.height) / imageSizes.width;\n\n            height += actualHeight;\n          });\n        }\n\n        elm.detach().css({\n          position: 'static',\n          visibility: 'visible'\n        });\n      }\n      else {\n        height = parseInt(elm.find('img').attr('height'), 10);\n      }\n\n      if (!elm.attr('id')) {\n        // Generate a unique id\n        elm.attr('id', this.generateUniqueId());\n      }\n\n      // Update item collection.\n      // Item needs to be placed at the end of this.items to keep order of elements\n\n      this.items.push( elm[0] ); // Fixed adding array to array\n\n      this.itemsHeights[elm.attr('id')] = height;\n      this.columnsHeights[lowestColumn] += height;\n      this.columns.eq(lowestColumn).append(elm);\n\n      this.levelBottomEdge(this.itemsHeights, this.columnsHeights);\n      this.container.trigger('mosaicflow-layout');\n      this.container.trigger('mosaicflow-item-added', [elm]);\n    },\n\n    remove: function(elm) {\n      this.container.trigger('mosaicflow-item-remove', [elm]);\n      var column = elm.parents('.' + this.options.columnClass);\n\n      // Update column height\n      this.columnsHeights[column.index() - 1] -= this.itemsHeights[elm.attr('id')];\n\n      elm.detach();\n\n      // Update item collection\n      this.items = this.items.not(elm);\n      this.levelBottomEdge(this.itemsHeights, this.columnsHeights);\n      this.container.trigger('mosaicflow-layout');\n      this.container.trigger('mosaicflow-item-removed', [elm]);\n    },\n\n    empty: function() {\n      var columnsCnt = this.numberOfColumns;\n\n      this.items = $([]);\n      this.itemsHeights = {};\n\n      for (var columnIdx = 0; columnIdx < columnsCnt; columnIdx++) {\n        var column = this.columns.eq(columnIdx);\n        this.columnsHeights[columnIdx] = 0;\n        column.empty();\n      }\n      this.container.trigger('mosaicflow-layout');\n    },\n\n    recomputeHeights: function() {\n      function computeHeight(idx, item) {\n        item = $(item);\n        var height = 0;\n        if (that.autoCalculation) {\n          // Check height after being placed in its column\n          height = item.outerHeight();\n        }\n        else {\n          // Read img height attribute\n          height = parseInt(item.find('img').attr('height'), 10);\n        }\n\n        that.itemsHeights[item.attr('id')] = height;\n        that.columnsHeights[columnIdx] += height;\n      }\n\n      var that = this;\n      var columnsCnt = this.numberOfColumns;\n\n      for (var columnIdx = 0; columnIdx < columnsCnt; columnIdx++) {\n        var column = this.columns.eq(columnIdx);\n\n        this.columnsHeights[columnIdx] = 0;\n        column.children().each(computeHeight);\n      }\n    },\n\n    generateUniqueId: function() {\n      // Increment the counter\n      this.__uidItemCounter++;\n\n      // Return an unique ID\n      return 'mosaic-' + this.__uid + '-itemid-' + this.__uidItemCounter;\n    }\n  };\n\n  // Camelize data-attributes\n  function dataToOptions(elem) {\n    function upper(m, l) {\n      return l.toUpper();\n    }\n    var options = {};\n    var data = elem.data();\n    for (var key in data) {\n      options[key.replace(/-(\\w)/g, upper)] = data[key];\n    }\n    return options;\n  }\n\n  function getImageSizes(image) {\n    var sizes = {};\n\n    sizes.height = parseInt(image.attr('height'), 10);\n    sizes.width = parseInt(image.attr('width'), 10);\n\n    if (sizes.height === 0 || sizes.width === 0) {\n      var utilImage = new Image();\n      utilImage.src = image.attr('src');\n\n      sizes.width = utilImage.width;\n      sizes.height = utilImage.height;\n    }\n\n    return sizes;\n  }\n\n  // Auto init\n  // $(function() { $('.mosaicflow').mosaicflow(); });\n\n}));\n"]}